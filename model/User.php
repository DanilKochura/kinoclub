<?php
require PATH.'/config/bd.php';
//require '../model/GetBase.php';
class User extends DB
{
    public string $name;
    public string $avatar;
    public int $module;
    public int $amount;
    public array $rates = [];
    public array $advices = [];
    public array $allowed = [];
    public int $id;
    public int $verify;
    public int $type;
    public array $allFilms = [];
    public array $third = [];
    public array $pair = [];

    /**
     * @param $id - id пользователя
     */
    public function __construct($id)
    {
        parent::__construct();
        $this->id = $id;
        $query_data = "SELECT ROUND(AVG(rate), 1) as module, count(id_meet) as amount, name, avatar, verify, class from expert_rate join expert on id_e=id_exp where id_exp = '$id' and rate is not null";
        $res_data = $this->Query_try($query_data);
        $dat = mysqli_fetch_assoc($res_data);
        $this->amount = $dat['amount'] ?: 0;
        $this->module = $dat['module'] ?: 0;
        $this->name = $dat['name'];
        $this->avatar = $dat['avatar'];
        $this->verify = $dat['verify'];
        $this->type = $dat['class'];
        $q = "SELECT DISTINCT poster, url from  movie left join meeting USING(id_m) join thirds on (first = id_m or second = id_m or third=id_m) where id_e = '$id' and meeting.id_m is null";
        $adv=$this->Query_try($q);
        while($row_a = $adv->fetch_assoc())
        {
            $this->advices[] = $row_a;
        }
        $query_m = "SELECT  `name_m`, `our_rate`, `rate`, `id_meet`, `url` FROM `movie` join `meeting` USING(`id_m`) join `expert_rate` using(`id_meet`) where `id_exp` = '$id' and rate is not null  order by rate desc";
        $res_m = $this->Query_try($query_m);
        while($row_r = $res_m->fetch_assoc())
        {
            $this->rates[] = $row_r;
        }
        $query = "select name_m, id_meet from movie join meeting using(id_m) left join (select * from expert_rate where id_exp = '$id') as e using(id_meet) where id_rate is NULL;";
        $res = $this->Query_try($query);
        while($row_al = $res->fetch_assoc())
        {
            $this->allowed[] = $row_al;
        }
        $query_meet = "SELECT name_m, id_m from movie left join meeting using(id_m) where id_meet is NULL";
        $momeet = $this->Query_try($query_meet);
        while($row = mysqli_fetch_assoc($momeet))
        {
            $this->allFilms[]=$row;
        }
        $third = $this->Query_try("SELECT  poster, url from thirds join movie on (id_m = first or id_m = second or id_m = third) where id_e = '$this->id' and checked = 0");
        if($third->num_rows == 0)
        {
            $this->third = [];
        }
        else {
            while ($row = $third->fetch_assoc()) {
                $this->third[] = $row;
            }
        }
        $pair = $this->Query_try("SELECT  poster, url from pairs join movie on (id_m = first or id_m = second) where id_exp = '$this->id'");
        if($pair->num_rows == 0)
        {
            $this->pair = [];
        }
        else {
            while ($row = $pair->fetch_assoc()) {
                $this->pair[] = $row;
            }
        }


    }
    public function debug()
    {
        echo '<pre>';
        print_r($this->advices);
        print_r($this->allowed);
        print_r($this->rates);
        echo $this->amount;
        echo $this->module;
        echo $this->name;
        echo $this->avatar;

        echo '</pre>';
        exit;
    }
//    public function __destruct()
//    {
//        parent::__destruct(); // TODO: Change the autogenerated stub
//        unset($this->rates);
//        unset($this->advices);
//        unset($this->allowed);
//    }



}
